""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input IngredientRelateToManyInput {
  create: [IngredientCreateInput]
  connect: [IngredientWhereUniqueInput]
  disconnect: [IngredientWhereUniqueInput]
  disconnectAll: Boolean
}

input DrinkRelateToManyInput {
  create: [DrinkCreateInput]
  connect: [DrinkWhereUniqueInput]
  disconnect: [DrinkWhereUniqueInput]
  disconnectAll: Boolean
}

input DrinkImageRelateToOneInput {
  create: DrinkImageCreateInput
  connect: DrinkImageWhereUniqueInput
  disconnect: DrinkImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Drink {
  id: ID!
  name: String
  ingredients: String
  linkedIngredients(where: IngredientWhereInput, search: String, sortBy: [SortIngredientsBy!], orderBy: String, first: Int, skip: Int): [Ingredient!]!
  _linkedIngredientsMeta(where: IngredientWhereInput, search: String, sortBy: [SortIngredientsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  preparation: String
  barware: String
  relatedDrinks(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): [Drink!]!
  _relatedDrinksMeta(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  source: String
  sourceLink: String
  editorialNotes: String
  photo: DrinkImage
  status: String
}

input DrinkWhereInput {
  AND: [DrinkWhereInput]
  OR: [DrinkWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  ingredients: String
  ingredients_not: String
  ingredients_contains: String
  ingredients_not_contains: String
  ingredients_starts_with: String
  ingredients_not_starts_with: String
  ingredients_ends_with: String
  ingredients_not_ends_with: String
  ingredients_i: String
  ingredients_not_i: String
  ingredients_contains_i: String
  ingredients_not_contains_i: String
  ingredients_starts_with_i: String
  ingredients_not_starts_with_i: String
  ingredients_ends_with_i: String
  ingredients_not_ends_with_i: String
  ingredients_in: [String]
  ingredients_not_in: [String]

  """ condition must be true for all nodes """
  linkedIngredients_every: IngredientWhereInput

  """ condition must be true for at least 1 node """
  linkedIngredients_some: IngredientWhereInput

  """ condition must be false for all nodes """
  linkedIngredients_none: IngredientWhereInput
  preparation: String
  preparation_not: String
  preparation_contains: String
  preparation_not_contains: String
  preparation_starts_with: String
  preparation_not_starts_with: String
  preparation_ends_with: String
  preparation_not_ends_with: String
  preparation_i: String
  preparation_not_i: String
  preparation_contains_i: String
  preparation_not_contains_i: String
  preparation_starts_with_i: String
  preparation_not_starts_with_i: String
  preparation_ends_with_i: String
  preparation_not_ends_with_i: String
  preparation_in: [String]
  preparation_not_in: [String]
  barware: String
  barware_not: String
  barware_contains: String
  barware_not_contains: String
  barware_starts_with: String
  barware_not_starts_with: String
  barware_ends_with: String
  barware_not_ends_with: String
  barware_i: String
  barware_not_i: String
  barware_contains_i: String
  barware_not_contains_i: String
  barware_starts_with_i: String
  barware_not_starts_with_i: String
  barware_ends_with_i: String
  barware_not_ends_with_i: String
  barware_in: [String]
  barware_not_in: [String]

  """ condition must be true for all nodes """
  relatedDrinks_every: DrinkWhereInput

  """ condition must be true for at least 1 node """
  relatedDrinks_some: DrinkWhereInput

  """ condition must be false for all nodes """
  relatedDrinks_none: DrinkWhereInput
  source: String
  source_not: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  source_i: String
  source_not_i: String
  source_contains_i: String
  source_not_contains_i: String
  source_starts_with_i: String
  source_not_starts_with_i: String
  source_ends_with_i: String
  source_not_ends_with_i: String
  source_in: [String]
  source_not_in: [String]
  sourceLink: String
  sourceLink_not: String
  sourceLink_contains: String
  sourceLink_not_contains: String
  sourceLink_starts_with: String
  sourceLink_not_starts_with: String
  sourceLink_ends_with: String
  sourceLink_not_ends_with: String
  sourceLink_i: String
  sourceLink_not_i: String
  sourceLink_contains_i: String
  sourceLink_not_contains_i: String
  sourceLink_starts_with_i: String
  sourceLink_not_starts_with_i: String
  sourceLink_ends_with_i: String
  sourceLink_not_ends_with_i: String
  sourceLink_in: [String]
  sourceLink_not_in: [String]
  editorialNotes: String
  editorialNotes_not: String
  editorialNotes_contains: String
  editorialNotes_not_contains: String
  editorialNotes_starts_with: String
  editorialNotes_not_starts_with: String
  editorialNotes_ends_with: String
  editorialNotes_not_ends_with: String
  editorialNotes_i: String
  editorialNotes_not_i: String
  editorialNotes_contains_i: String
  editorialNotes_not_contains_i: String
  editorialNotes_starts_with_i: String
  editorialNotes_not_starts_with_i: String
  editorialNotes_ends_with_i: String
  editorialNotes_not_ends_with_i: String
  editorialNotes_in: [String]
  editorialNotes_not_in: [String]
  photo: DrinkImageWhereInput
  photo_is_null: Boolean
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
}

input DrinkWhereUniqueInput {
  id: ID!
}

enum SortDrinksBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ingredients_ASC
  ingredients_DESC
  linkedIngredients_ASC
  linkedIngredients_DESC
  preparation_ASC
  preparation_DESC
  barware_ASC
  barware_DESC
  relatedDrinks_ASC
  relatedDrinks_DESC
  source_ASC
  source_DESC
  sourceLink_ASC
  sourceLink_DESC
  editorialNotes_ASC
  editorialNotes_DESC
  photo_ASC
  photo_DESC
  status_ASC
  status_DESC
}

input DrinkUpdateInput {
  name: String
  ingredients: String
  linkedIngredients: IngredientRelateToManyInput
  preparation: String
  barware: String
  relatedDrinks: DrinkRelateToManyInput
  source: String
  sourceLink: String
  editorialNotes: String
  photo: DrinkImageRelateToOneInput
  status: String
}

input DrinksUpdateInput {
  id: ID!
  data: DrinkUpdateInput
}

input DrinkCreateInput {
  name: String
  ingredients: String
  linkedIngredients: IngredientRelateToManyInput
  preparation: String
  barware: String
  relatedDrinks: DrinkRelateToManyInput
  source: String
  sourceLink: String
  editorialNotes: String
  photo: DrinkImageRelateToOneInput
  status: String
}

input DrinksCreateInput {
  data: DrinkCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input DrinkRelateToOneInput {
  create: DrinkCreateInput
  connect: DrinkWhereUniqueInput
  disconnect: DrinkWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type DrinkImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  imgCredit: String
  drink: Drink
}

input DrinkImageWhereInput {
  AND: [DrinkImageWhereInput]
  OR: [DrinkImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  imgCredit: String
  imgCredit_not: String
  imgCredit_contains: String
  imgCredit_not_contains: String
  imgCredit_starts_with: String
  imgCredit_not_starts_with: String
  imgCredit_ends_with: String
  imgCredit_not_ends_with: String
  imgCredit_i: String
  imgCredit_not_i: String
  imgCredit_contains_i: String
  imgCredit_not_contains_i: String
  imgCredit_starts_with_i: String
  imgCredit_not_starts_with_i: String
  imgCredit_ends_with_i: String
  imgCredit_not_ends_with_i: String
  imgCredit_in: [String]
  imgCredit_not_in: [String]
  drink: DrinkWhereInput
  drink_is_null: Boolean
}

input DrinkImageWhereUniqueInput {
  id: ID!
}

enum SortDrinkImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  imgCredit_ASC
  imgCredit_DESC
  drink_ASC
  drink_DESC
}

input DrinkImageUpdateInput {
  image: Upload
  altText: String
  imgCredit: String
  drink: DrinkRelateToOneInput
}

input DrinkImagesUpdateInput {
  id: ID!
  data: DrinkImageUpdateInput
}

input DrinkImageCreateInput {
  image: Upload
  altText: String
  imgCredit: String
  drink: DrinkRelateToOneInput
}

input DrinkImagesCreateInput {
  data: DrinkImageCreateInput
}

""" A keystone list """
type Ingredient {
  id: ID!
  name: String
  drink(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): [Drink!]!
  _drinkMeta(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  category: String
  notes: String
}

input IngredientWhereInput {
  AND: [IngredientWhereInput]
  OR: [IngredientWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """ condition must be true for all nodes """
  drink_every: DrinkWhereInput

  """ condition must be true for at least 1 node """
  drink_some: DrinkWhereInput

  """ condition must be false for all nodes """
  drink_none: DrinkWhereInput
  category: String
  category_not: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  category_i: String
  category_not_i: String
  category_contains_i: String
  category_not_contains_i: String
  category_starts_with_i: String
  category_not_starts_with_i: String
  category_ends_with_i: String
  category_not_ends_with_i: String
  category_in: [String]
  category_not_in: [String]
  notes: String
  notes_not: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  notes_i: String
  notes_not_i: String
  notes_contains_i: String
  notes_not_contains_i: String
  notes_starts_with_i: String
  notes_not_starts_with_i: String
  notes_ends_with_i: String
  notes_not_ends_with_i: String
  notes_in: [String]
  notes_not_in: [String]
}

input IngredientWhereUniqueInput {
  id: ID!
}

enum SortIngredientsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  drink_ASC
  drink_DESC
  category_ASC
  category_DESC
  notes_ASC
  notes_DESC
}

input IngredientUpdateInput {
  name: String
  drink: DrinkRelateToManyInput
  category: String
  notes: String
}

input IngredientsUpdateInput {
  id: ID!
  data: IngredientUpdateInput
}

input IngredientCreateInput {
  name: String
  drink: DrinkRelateToManyInput
  category: String
  notes: String
}

input IngredientsCreateInput {
  data: IngredientCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Drink items which match the where clause. """
  allDrinks(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): [Drink]

  """ Search for the Drink item with the matching ID. """
  Drink(where: DrinkWhereUniqueInput!): Drink

  """ Perform a meta-query on all Drink items which match the where clause. 
  """
  _allDrinksMeta(where: DrinkWhereInput, search: String, sortBy: [SortDrinksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Drink list. """
  _DrinksMeta: _ListMeta

  """ Search for all DrinkImage items which match the where clause. """
  allDrinkImages(where: DrinkImageWhereInput, search: String, sortBy: [SortDrinkImagesBy!], orderBy: String, first: Int, skip: Int): [DrinkImage]

  """ Search for the DrinkImage item with the matching ID. """
  DrinkImage(where: DrinkImageWhereUniqueInput!): DrinkImage

  """ Perform a meta-query on all DrinkImage items which match the where clause. 
  """
  _allDrinkImagesMeta(where: DrinkImageWhereInput, search: String, sortBy: [SortDrinkImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the DrinkImage list. """
  _DrinkImagesMeta: _ListMeta

  """ Search for all Ingredient items which match the where clause. """
  allIngredients(where: IngredientWhereInput, search: String, sortBy: [SortIngredientsBy!], orderBy: String, first: Int, skip: Int): [Ingredient]

  """ Search for the Ingredient item with the matching ID. """
  Ingredient(where: IngredientWhereUniqueInput!): Ingredient

  """ Perform a meta-query on all Ingredient items which match the where clause. 
  """
  _allIngredientsMeta(where: IngredientWhereInput, search: String, sortBy: [SortIngredientsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Ingredient list. """
  _IngredientsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Drink item. """
  createDrink(data: DrinkCreateInput): Drink

  """ Create multiple Drink items. """
  createDrinks(data: [DrinksCreateInput]): [Drink]

  """ Update a single Drink item by ID. """
  updateDrink(id: ID!, data: DrinkUpdateInput): Drink

  """ Update multiple Drink items by ID. """
  updateDrinks(data: [DrinksUpdateInput]): [Drink]

  """ Delete a single Drink item by ID. """
  deleteDrink(id: ID!): Drink

  """ Delete multiple Drink items by ID. """
  deleteDrinks(ids: [ID!]): [Drink]

  """ Create a single DrinkImage item. """
  createDrinkImage(data: DrinkImageCreateInput): DrinkImage

  """ Create multiple DrinkImage items. """
  createDrinkImages(data: [DrinkImagesCreateInput]): [DrinkImage]

  """ Update a single DrinkImage item by ID. """
  updateDrinkImage(id: ID!, data: DrinkImageUpdateInput): DrinkImage

  """ Update multiple DrinkImage items by ID. """
  updateDrinkImages(data: [DrinkImagesUpdateInput]): [DrinkImage]

  """ Delete a single DrinkImage item by ID. """
  deleteDrinkImage(id: ID!): DrinkImage

  """ Delete multiple DrinkImage items by ID. """
  deleteDrinkImages(ids: [ID!]): [DrinkImage]

  """ Create a single Ingredient item. """
  createIngredient(data: IngredientCreateInput): Ingredient

  """ Create multiple Ingredient items. """
  createIngredients(data: [IngredientsCreateInput]): [Ingredient]

  """ Update a single Ingredient item by ID. """
  updateIngredient(id: ID!, data: IngredientUpdateInput): Ingredient

  """ Update multiple Ingredient items by ID. """
  updateIngredients(data: [IngredientsUpdateInput]): [Ingredient]

  """ Delete a single Ingredient item by ID. """
  deleteIngredient(id: ID!): Ingredient

  """ Delete multiple Ingredient items by ID. """
  deleteIngredients(ids: [ID!]): [Ingredient]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
